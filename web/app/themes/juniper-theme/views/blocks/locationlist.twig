{#
 	Title: Location List
 	Description: This displays a grid of locations.
 	Category: formatting
 	Icon: admin-comments
 	Keywords: location grid card column
 	Mode: edit
 	Align: full
 	PostTypes: page post jobs projects
 	SupportsAlign: left right full
 	SupportsMode: true
 	SupportsMultiple: true
#}
<style type="text/css">
	.acf-map {
		width: 100%;
		height: 400px;
	}

	.acf-map img {
		max-width: inherit !important;
	}
</style>


<section class="location-grid {% if fields.style == "dark" %}location-list-background-dark {% elseif fields.style == "white" %}location-list-background-white{% endif %}">

	<div class="container mx-auto mt-8">
		<div class="mb-20 pt-[3rem]">
			<p class="tagline">{{ fields.tagline }}</p>
			<h2 class="mb-4">{{ fields.title }}</h2>
			<h3 class="mb-4">{{ fields.subtitle }}</h3>
			<p class="mb-4">{{ fields.intro_text }}</p>
		</div>
		<div class="grid md:grid-cols-2 gap-4 mb-24">
			{% for location in fields.locations %}
				<div class="rounded-none h-full flex items-center justify-start flex-col location-card shrink">
					<div class="acf-map" data-zoom="16">
						<div class="marker" data-lat="{{ location.location.lat }}" data-lng="{{ location.location.lng }}"></div>
					</div>
					<div class="location-info w-full p-2 block">
						<h3 class="name mb-8">Standort:
							{{ location.name }}
							//
							<br/>
							{{ location.country }}</h3>
						<p class="mb-3">
							<span class="inline-flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none">
									<path d="M4 4H20C21.1 4 22 4.9 22 6V18C22 19.1 21.1 20 20 20H4C2.9 20 2 19.1 2 18V6C2 4.9 2.9 4 4 4Z" stroke="#1E1E1E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
									<path d="M22 6L12 13L2 6" stroke="#1E1E1E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								</svg>
								{{ location.email }}
							</span>
						</p>
						<p class="mb-3">
							<span class="inline-flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none">
									<path d="M21.9999 16.9201V19.9201C22.0011 20.1986 21.944 20.4743 21.8324 20.7294C21.7209 20.9846 21.5572 21.2137 21.352 21.402C21.1468 21.5902 20.9045 21.7336 20.6407 21.8228C20.3769 21.912 20.0973 21.9452 19.8199 21.9201C16.7428 21.5857 13.7869 20.5342 11.1899 18.8501C8.77376 17.3148 6.72527 15.2663 5.18993 12.8501C3.49991 10.2413 2.44818 7.27109 2.11993 4.1801C2.09494 3.90356 2.12781 3.62486 2.21643 3.36172C2.30506 3.09859 2.4475 2.85679 2.6347 2.65172C2.82189 2.44665 3.04974 2.28281 3.30372 2.17062C3.55771 2.05843 3.83227 2.00036 4.10993 2.0001H7.10993C7.59524 1.99532 8.06572 2.16718 8.43369 2.48363C8.80166 2.80008 9.04201 3.23954 9.10993 3.7201C9.23656 4.68016 9.47138 5.62282 9.80993 6.5301C9.94448 6.88802 9.9736 7.27701 9.89384 7.65098C9.81408 8.02494 9.6288 8.36821 9.35993 8.6401L8.08993 9.9101C9.51349 12.4136 11.5864 14.4865 14.0899 15.9101L15.3599 14.6401C15.6318 14.3712 15.9751 14.1859 16.3491 14.1062C16.723 14.0264 17.112 14.0556 17.4699 14.1901C18.3772 14.5286 19.3199 14.7635 20.2799 14.8901C20.7657 14.9586 21.2093 15.2033 21.5265 15.5776C21.8436 15.9519 22.0121 16.4297 21.9999 16.9201Z" stroke="#1E1E1E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								</svg>
								{{ location.phone}}
							</span>
						</p>
						<p class="mb-3">
							<span class="inline-flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewbox="0 0 24 24" fill="none">
									<path d="M21 10C21 17 12 23 12 23C12 23 3 17 3 10C3 7.61305 3.94821 5.32387 5.63604 3.63604C7.32387 1.94821 9.61305 1 12 1C14.3869 1 16.6761 1.94821 18.364 3.63604C20.0518 5.32387 21 7.61305 21 10Z" stroke="#1E1E1E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
									<path d="M12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z" stroke="#1E1E1E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								</svg>
								{{ location.location.address }}
							</span>
						</p>
						<a href="{{ location.link }}" class="btn btn-underline w-fit mt-12 block">
							{{ location.name }}
							entdecken
						</a>

					</div>
				</div>
			{% endfor %}
		</div>
	</div>

</section>
<script src="https://maps.googleapis.com/maps/api/js?key={{ maps_api_key }}&callback=Function.prototype"></script>
<script type="text/javascript">

	/**
	* initMap
	*
	* Renders a Google Map onto the selected jQuery element
	*
	* @date    22/10/19
	* @since   5.8.6
	*
	* @param   jQuery el The jQuery element.
	* @return  object The map instance.
	*/
	function initMap( el ) {

		// Find marker elements within map.
		var markers = el.querySelectorAll('.marker');

		// Create gerenic map.
		var mapArgs = {
			zoom        : parseInt(el.dataset.zoom) || 16,
			mapTypeId   : google.maps.MapTypeId.ROADMAP
		};
		var map = new google.maps.Map( el, mapArgs );

		// Add markers.
		map.markers = [];
		markers.forEach(marker => {
			initMarker( marker, map );
		});

		// Center map based on markers.
		centerMap( map );

		// Return map instance.
		return map;
	}

	/**
	* initMarker
	*
	* Creates a marker for the given jQuery element and map.
	*
	* @date    22/10/19
	* @since   5.8.6
	*
	* @param   jQuery el The jQuery element.
	* @param   object The map instance.
	* @return  object The marker instance.
	*/
	function initMarker( marker, map ) {

		// Get position from marker.
		var lat = marker.dataset.lat;
		var lng = marker.dataset.lng;
		var latLng = {
			lat: parseFloat( lat ),
			lng: parseFloat( lng )
		};

		// Create marker instance.
		var marker = new google.maps.Marker({
			position : latLng,
			map: map
		});

		// Append to reference for later use.
		map.markers.push( marker );

		// If marker contains HTML, add it to an infoWindow.
		if( marker.innerHTML ){

			// Create info window.
			var infowindow = new google.maps.InfoWindow({
				content: marker.innerHTML
			});

			// Show info window when marker is clicked.
			google.maps.event.addListener(marker, 'click', function() {
				infowindow.open( map, marker );
			});
		}
	}

	/**
	* centerMap
	*
	* Centers the map showing all markers in view.
	*
	* @date    22/10/19
	* @since   5.8.6
	*
	* @param   object The map instance.
	* @return  void
	*/
	function centerMap( map ) {

		// Create map boundaries from all map markers.
		var bounds = new google.maps.LatLngBounds();
		map.markers.forEach(function( marker ){
			bounds.extend({
				lat: marker.position.lat(),
				lng: marker.position.lng()
			});
		});

		// Case: Single marker.
		if( map.markers.length == 1 ){
			map.setCenter( bounds.getCenter() );

		// Case: Multiple markers.
		} else{
			map.fitBounds( bounds );
		}
	}

	// Render maps on page load.
	document.querySelectorAll('.acf-map').forEach(map => {
		var map = initMap( map );
	});
</script>
